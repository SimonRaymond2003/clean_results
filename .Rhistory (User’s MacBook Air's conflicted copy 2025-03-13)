# Remove unwanted columns
select_data[, c("attendance_raw", "attendance_pct", "my_id") := NULL]
# Remove specific columns if they exist
if ("yardline_31_40" %in% names(select_data)) select_data[, yardline_31_40 := NULL]
if ("Giff_Smith" %in% names(select_data)) select_data[, Giff_Smith := NULL]
# Identify player columns
all_cols <- colnames(select_data)
# Create regex patterns to identify starter player variables
# Updated patterns to match transformed column names
starter_offense_pattern <- "^starter_(QB|QB2|QB3|RB|RB2|FB|FB2|WR\\d+|TE\\d+|OL)_"
starter_defense_pattern <- "^starter_(DL\\d+|LB\\d+|CB\\d+|S\\d+)_"
# Get columns for each type
starter_offense_cols <- grep(starter_offense_pattern, all_cols, value = TRUE)
starter_defense_cols <- grep(starter_defense_pattern, all_cols, value = TRUE)
# All starter player columns
starter_player_cols <- c(starter_offense_cols, starter_defense_cols)
# Non-player columns - updated patterns for regular player columns
common_cols <- setdiff(all_cols, c(starter_player_cols,
grep("^(QB|QB2|QB3|RB|RB2|FB|FB2|WR\\d+|TE\\d+|OL)_", all_cols, value = TRUE),
grep("^(DL\\d+|LB\\d+|CB\\d+|S\\d+)_", all_cols, value = TRUE)))
# Create dataset with only starter players
starter_data <- select_data[, c(common_cols, starter_player_cols), with = FALSE]
# OLS Model with Starter Players
ols_starter <- lm(attempt ~ ., data = starter_data)
# Get robust statistics for OLS
ols_starter_robust <- coeftest(ols_starter, vcov = vcovHC(ols_starter, type = "HC0"))
# Function to format results nicely
format_results <- function(model_results, model_name) {
cat(sprintf("\n%s Model Results (Robust Statistics)\n", model_name))
cat(sprintf("%-30s %12s %12s %6s\n", "Variable", "Coefficient", "t-value", "Sig"))
cat(paste(rep("-", 65), collapse = ""), "\n")
for(i in 1:nrow(model_results)) {
p_val <- model_results[i, "Pr(>|t|)"]
stars <- ifelse(p_val < 0.01, "***",
ifelse(p_val < 0.05, "**",
ifelse(p_val < 0.1, "*",
ifelse(p_val < 0.15, ".", ""))))
cat(sprintf("%-30s %12.4f %12.4f %6s\n",
substr(rownames(model_results)[i], 1, 60),
model_results[i, "Estimate"],
model_results[i, "t value"],
stars))
}
cat("\nSignificance codes: 0 '***' 0.01 '**' 0.05 '*' 0.1 '.' 0.15\n")
}
# Print results
format_results(ols_starter_robust, "OLS Starter Players")
# Add model fit statistics
cat("\nModel Fit Statistics:\n")
cat("OLS Starter R-squared:", round(summary(ols_starter)$r.squared, 4), "\n")
cat("OLS Starter Adj R-squared:", round(summary(ols_starter)$adj.r.squared, 4), "\n")
# Calculate VIFs for the starter model
cat("\nVIFs for Starter Players Model (showing only VIF > 5):\n")
starter_vifs <- vif(ols_starter)
high_vifs <- starter_vifs[starter_vifs > 5]
if(length(high_vifs) > 0) {
for(var_name in names(high_vifs)) {
cat(sprintf("%-50s  %7.2f\n", var_name, high_vifs[var_name]))
}
} else {
cat("No variables with VIF > 5 found in this model\n")
}
# Check for linear dependencies in starter data
X_starter <- model.matrix(~ . - attempt - 1, data = starter_data)
lin_combos_starter <- findLinearCombos(X_starter)
if (!is.null(lin_combos_starter$remove)) {
cols_to_remove <- colnames(X_starter)[lin_combos_starter$remove]
cat("\nRemoved from starter data:", paste(cols_to_remove, collapse=", "), "\n")
starter_data <- starter_data[, (cols_to_remove) := NULL, with = FALSE]
}
# Probit model with starter players
probit_starter <- glm(attempt ~ ., data = starter_data, family = binomial(link = "probit"))
# Get HC0-adjusted z-values and p-values for starter probit
robust_probit_starter <- coeftest(probit_starter, vcov = vcovHC(probit_starter, type = "HC0"))
# Extract kicker/punter variables and their significance
# Update kicker patterns to match transformed column names
kicker_patterns <- c(
"_punting",
"_field_goals",
"_punter",
"_kicker",
"starter_(QB|RB|WR\\d+|TE\\d+)_(K|P)_",
"starter_.+_(kicker|punter)"
)
# Find kicker/punter variables in Probit model
probit_kicker_vars <- character(0)
for (pattern in kicker_patterns) {
found_vars <- grep(pattern, rownames(robust_probit_starter), value = TRUE, ignore.case = TRUE)
if (length(found_vars) > 0) {
probit_kicker_vars <- c(probit_kicker_vars, found_vars)
}
}
# Find kicker/punter variables in OLS model
ols_kicker_vars <- character(0)
for (pattern in kicker_patterns) {
found_vars <- grep(pattern, rownames(ols_starter_robust), value = TRUE, ignore.case = TRUE)
if (length(found_vars) > 0) {
ols_kicker_vars <- c(ols_kicker_vars, found_vars)
}
}
# Remove duplicates
probit_kicker_vars <- unique(probit_kicker_vars)
ols_kicker_vars <- unique(ols_kicker_vars)
# Store Probit kicker/punter results
probit_results <- data.table(
Variable = character(),
Coefficient = numeric(),
Z_Value = numeric(),
P_Value = numeric()
)
if (length(probit_kicker_vars) > 0) {
for (var in probit_kicker_vars) {
probit_results <- rbindlist(list(probit_results, data.table(
Variable = var,
Coefficient = robust_probit_starter[var, "Estimate"],
Z_Value = robust_probit_starter[var, "z value"],
P_Value = robust_probit_starter[var, "Pr(>|z|)"]
)))
}
}
# Store OLS kicker/punter results
ols_results <- data.table(
Variable = character(),
Coefficient = numeric(),
T_Value = numeric(),
P_Value = numeric()
)
if (length(ols_kicker_vars) > 0) {
for (var in ols_kicker_vars) {
ols_results <- rbindlist(list(ols_results, data.table(
Variable = var,
Coefficient = ols_starter_robust[var, "Estimate"],
T_Value = ols_starter_robust[var, "t value"],
P_Value = ols_starter_robust[var, "Pr(>|t|)"]
)))
}
}
# Model summary statistics
cat("\n\n--- Model Summary Statistics ---\n")
cat("OLS Starter Players R-squared:", round(summary(ols_starter)$r.squared, 4), "\n")
cat("OLS Starter Players Adj R-squared:", round(summary(ols_starter)$adj.r.squared, 4), "\n\n")
cat("Probit Starter Players AIC:", round(probit_starter$aic, 2), "\n")
cat("Probit Starter Players McFadden's Pseudo RÂ²:", round(1 - probit_starter$deviance/probit_starter$null.deviance, 4), "\n")
# Return results needed for the summary table
return(list(
dataset = select_file,
ols_r2 = summary(ols_starter)$r.squared,
ols_adj_r2 = summary(ols_starter)$adj.r.squared,
probit_aic = probit_starter$aic,
probit_pseudo_r2 = 1 - probit_starter$deviance/probit_starter$null.deviance,
probit_kicker_results = probit_results,  # Changed from kicker_results to probit_kicker_results
ols_kicker_results = ols_results  # Added ols_kicker_results
))
}
# Define the datasets to analyze
datasets <- c(
"processed_predict_ccfd_off_grades.csv_v2.csv.gz",
"processed_predict_ccfd_off_yards.csv_v2.csv.gz",
"processed_predict_ccfd_off_tds.csv_v2.csv.gz",
"processed_predict_ccfd_off_specifics.csv_v2.csv.gz",
"processed_predict_ccfd_off_first_downs.csv_v2.csv.gz",
"processed_predict_ccfd_def_stops.csv_v2.csv.gz",
"processed_predict_ccfd_def_grades.csv_v2.csv.gz",
"processed_predict_ccfd_def_specifics.csv_v2.csv.gz",
"processed_predict_ccfd_def_tackles.csv_v2.csv.gz",
"processed_predict_ccfd_def_pressure.csv_v2.csv.gz"
)
# Initialize data.table to store summary results
summary_results <- data.table(
Dataset = character(),
OLS_R2 = numeric(),
OLS_Adj_R2 = numeric(),
Probit_AIC = numeric(),
Probit_Pseudo_R2 = numeric()
)
# Initialize lists to store results
kicker_punter_probit_results <- list()
kicker_punter_ols_results <- list()
# Run analysis on each dataset
for (i in 1:length(datasets)) {
dataset_name <- gsub(".csv.gz", "", datasets[i])
# Make dataset name more readable
display_name <- gsub("processed_predict_ccfd_|_v2", "", dataset_name)
display_name <- gsub("_", " ", display_name)
display_name <- tools::toTitleCase(display_name)
cat("\n\n")
cat(paste(rep("=", 100), collapse=""), "\n")
cat(sprintf("ANALYZING DATASET %d/%d: %s\n", i, length(datasets), display_name))
cat(paste(rep("=", 100), collapse=""), "\n\n")
# Run analysis
results <- analyze_attempt_models(datasets[i])
# Store summary results
summary_results <- rbindlist(list(summary_results, data.table(
Dataset = display_name,
OLS_R2 = results$ols_r2,
OLS_Adj_R2 = results$ols_adj_r2,
Probit_AIC = results$probit_aic,
Probit_Pseudo_R2 = results$probit_pseudo_r2
)))
# Store kicker/punter results for probit and ols models
if (nrow(results$probit_kicker_results) > 0) {  # Changed from kicker_results to probit_kicker_results
kicker_punter_probit_results[[display_name]] <- results$probit_kicker_results  # Changed from kicker_results to probit_kicker_results
}
if (nrow(results$ols_kicker_results) > 0) {
kicker_punter_ols_results[[display_name]] <- results$ols_kicker_results
}
}
knitr::opts_chunk$set(echo=FALSE)
library(data.table)
library(sandwich)
library(lmtest)
library(car)
library(caret)
# Column Name Transformer for Football Analytics
transform_column_names <- function(df) {
# Position mapping
offense_positions <- c(
# QB slots (1-3)
"1" = "QB", "2" = "QB2", "3" = "QB3",
# Backs slots (4-7)
"4" = "RB", "5" = "RB2", "6" = "FB", "7" = "FB2",
# Wide receivers slots (8-13)
"8" = "WR1", "9" = "WR2", "10" = "WR3", "11" = "WR4", "12" = "WR5", "13" = "WR6",
# Tight ends slots (14-16)
"14" = "TE1", "15" = "TE2", "16" = "TE3",
# Offensive line slots (17-24)
"17" = "OL", "18" = "OL", "19" = "OL", "20" = "OL", "21" = "OL",
"22" = "OL", "23" = "OL", "24" = "OL"
)
defense_positions <- c(
# Defensive line slots (1-8)
"1" = "DL1", "2" = "DL2", "3" = "DL3", "4" = "DL4",
"5" = "DL5", "6" = "DL6", "7" = "DL7", "8" = "DL8",
# Linebackers slots (9-14)
"9" = "LB1", "10" = "LB2", "11" = "LB3", "12" = "LB4",
"13" = "LB5", "14" = "LB6",
# Cornerbacks slots (15-19)
"15" = "CB1", "16" = "CB2", "17" = "CB3", "18" = "CB4", "19" = "CB5",
# Safeties slots (20-23)
"20" = "S1", "21" = "S2", "22" = "S3", "23" = "S4"
)
# Get column names
cols <- colnames(df)
new_cols <- cols
for (i in seq_along(cols)) {
col <- cols[i]
# Handle offense player patterns
if (grepl("offense_player_", col)) {
player_num <- gsub(".*offense_player_([0-9\\-]+).*", "\\1", col)
# Determine position
if (grepl("-", player_num)) {
position <- "OL"
} else if (player_num %in% names(offense_positions)) {
position <- offense_positions[player_num]
} else {
position <- paste0("OFF", player_num)
}
# Replace pattern and remove first two words after
if (grepl("^starter_", col)) {
parts <- strsplit(gsub("starter_offense_player_[0-9\\-]+_", "", col), "_")[[1]]
if (length(parts) >= 2) {
parts <- parts[-(1:2)]
}
new_cols[i] <- paste("starter", position, paste(parts, collapse = "_"), sep = "_")
} else {
parts <- strsplit(gsub("offense_player_[0-9\\-]+_", "", col), "_")[[1]]
if (length(parts) >= 2) {
parts <- parts[-(1:2)]
}
new_cols[i] <- paste(position, paste(parts, collapse = "_"), sep = "_")
}
}
# Handle defense player patterns
else if (grepl("defense_player_", col)) {
player_num <- gsub(".*defense_player_([0-9]+).*", "\\1", col)
# Determine position
if (player_num %in% names(defense_positions)) {
position <- defense_positions[player_num]
} else {
position <- paste0("DEF", player_num)
}
# Replace pattern and remove first two words after
if (grepl("^starter_", col)) {
parts <- strsplit(gsub("starter_defense_player_[0-9]+_", "", col), "_")[[1]]
if (length(parts) >= 2) {
parts <- parts[-(1:2)]
}
new_cols[i] <- paste("starter", position, paste(parts, collapse = "_"), sep = "_")
} else {
parts <- strsplit(gsub("defense_player_[0-9]+_", "", col), "_")[[1]]
if (length(parts) >= 2) {
parts <- parts[-(1:2)]
}
new_cols[i] <- paste(position, paste(parts, collapse = "_"), sep = "_")
}
}
}
# Set the new column names
colnames(df) <- new_cols
return(df)
}
analyze_attempt_models <- function(select_file) {
# Read data file
cat("\nReading data:", select_file, "\n")
select_data <- fread(select_file)
# Apply the column name transformation
select_data <- transform_column_names(select_data)
# Remove unwanted columns
select_data[, c("attendance_raw", "attendance_pct", "my_id") := NULL]
# Remove specific columns if they exist
if ("yardline_31_40" %in% names(select_data)) select_data[, yardline_31_40 := NULL]
if ("Giff_Smith" %in% names(select_data)) select_data[, Giff_Smith := NULL]
# Identify player columns
all_cols <- colnames(select_data)
# Create regex patterns to identify starter player variables
# Updated patterns to match transformed column names
starter_offense_pattern <- "^starter_(QB|QB2|QB3|RB|RB2|FB|FB2|WR\\d+|TE\\d+|OL)_"
starter_defense_pattern <- "^starter_(DL\\d+|LB\\d+|CB\\d+|S\\d+)_"
# Get columns for each type
starter_offense_cols <- grep(starter_offense_pattern, all_cols, value = TRUE)
starter_defense_cols <- grep(starter_defense_pattern, all_cols, value = TRUE)
# All starter player columns
starter_player_cols <- c(starter_offense_cols, starter_defense_cols)
# Non-player columns - updated patterns for regular player columns
common_cols <- setdiff(all_cols, c(starter_player_cols,
grep("^(QB|QB2|QB3|RB|RB2|FB|FB2|WR\\d+|TE\\d+|OL)_", all_cols, value = TRUE),
grep("^(DL\\d+|LB\\d+|CB\\d+|S\\d+)_", all_cols, value = TRUE)))
# Create dataset with only starter players
starter_data <- select_data[, c(common_cols, starter_player_cols), with = FALSE]
# OLS Model with Starter Players
ols_starter <- lm(attempt ~ ., data = starter_data)
# Get robust statistics for OLS
ols_starter_robust <- coeftest(ols_starter, vcov = vcovHC(ols_starter, type = "HC0"))
# Function to format results nicely
format_results <- function(model_results, model_name) {
cat(sprintf("\n%s Model Results (Robust Statistics)\n", model_name))
cat(sprintf("%-30s %12s %12s %6s\n", "Variable", "Coefficient", "t-value", "Sig"))
cat(paste(rep("-", 65), collapse = ""), "\n")
for(i in 1:nrow(model_results)) {
p_val <- model_results[i, "Pr(>|t|)"]
stars <- ifelse(p_val < 0.01, "***",
ifelse(p_val < 0.05, "**",
ifelse(p_val < 0.1, "*",
ifelse(p_val < 0.15, ".", ""))))
cat(sprintf("%-30s %12.4f %12.4f %6s\n",
substr(rownames(model_results)[i], 1, 60),
model_results[i, "Estimate"],
model_results[i, "t value"],
stars))
}
cat("\nSignificance codes: 0 '***' 0.01 '**' 0.05 '*' 0.1 '.' 0.15\n")
}
# Print results
format_results(ols_starter_robust, "OLS Starter Players")
# Add model fit statistics
cat("\nModel Fit Statistics:\n")
cat("OLS Starter R-squared:", round(summary(ols_starter)$r.squared, 4), "\n")
cat("OLS Starter Adj R-squared:", round(summary(ols_starter)$adj.r.squared, 4), "\n")
# Calculate VIFs for the starter model
cat("\nVIFs for Starter Players Model (showing only VIF > 5):\n")
starter_vifs <- vif(ols_starter)
high_vifs <- starter_vifs[starter_vifs > 5]
if(length(high_vifs) > 0) {
for(var_name in names(high_vifs)) {
cat(sprintf("%-50s  %7.2f\n", var_name, high_vifs[var_name]))
}
} else {
cat("No variables with VIF > 5 found in this model\n")
}
# Check for linear dependencies in starter data
X_starter <- model.matrix(~ . - attempt - 1, data = starter_data)
lin_combos_starter <- findLinearCombos(X_starter)
if (!is.null(lin_combos_starter$remove)) {
cols_to_remove <- colnames(X_starter)[lin_combos_starter$remove]
cat("\nRemoved from starter data:", paste(cols_to_remove, collapse=", "), "\n")
starter_data <- starter_data[, (cols_to_remove) := NULL, with = FALSE]
}
# Probit model with starter players
probit_starter <- glm(attempt ~ ., data = starter_data, family = binomial(link = "probit"))
# Get HC0-adjusted z-values and p-values for starter probit
robust_probit_starter <- coeftest(probit_starter, vcov = vcovHC(probit_starter, type = "HC0"))
# Extract kicker/punter variables and their significance
# Update kicker patterns to match transformed column names
kicker_patterns <- c(
"_punting",
"_field_goals",
"_punter",
"_kicker",
"starter_(QB|RB|WR\\d+|TE\\d+)_(K|P)_",
"starter_.+_(kicker|punter)"
)
# Find kicker/punter variables in Probit model
probit_kicker_vars <- character(0)
for (pattern in kicker_patterns) {
found_vars <- grep(pattern, rownames(robust_probit_starter), value = TRUE, ignore.case = TRUE)
if (length(found_vars) > 0) {
probit_kicker_vars <- c(probit_kicker_vars, found_vars)
}
}
# Find kicker/punter variables in OLS model
ols_kicker_vars <- character(0)
for (pattern in kicker_patterns) {
found_vars <- grep(pattern, rownames(ols_starter_robust), value = TRUE, ignore.case = TRUE)
if (length(found_vars) > 0) {
ols_kicker_vars <- c(ols_kicker_vars, found_vars)
}
}
# Remove duplicates
probit_kicker_vars <- unique(probit_kicker_vars)
ols_kicker_vars <- unique(ols_kicker_vars)
# Store Probit kicker/punter results
probit_results <- data.table(
Variable = character(),
Coefficient = numeric(),
Z_Value = numeric(),
P_Value = numeric()
)
if (length(probit_kicker_vars) > 0) {
for (var in probit_kicker_vars) {
probit_results <- rbindlist(list(probit_results, data.table(
Variable = var,
Coefficient = robust_probit_starter[var, "Estimate"],
Z_Value = robust_probit_starter[var, "z value"],
P_Value = robust_probit_starter[var, "Pr(>|z|)"]
)))
}
}
# Store OLS kicker/punter results
ols_results <- data.table(
Variable = character(),
Coefficient = numeric(),
T_Value = numeric(),
P_Value = numeric()
)
if (length(ols_kicker_vars) > 0) {
for (var in ols_kicker_vars) {
ols_results <- rbindlist(list(ols_results, data.table(
Variable = var,
Coefficient = ols_starter_robust[var, "Estimate"],
T_Value = ols_starter_robust[var, "t value"],
P_Value = ols_starter_robust[var, "Pr(>|t|)"]
)))
}
}
# Model summary statistics
cat("\n\n--- Model Summary Statistics ---\n")
cat("OLS Starter Players R-squared:", round(summary(ols_starter)$r.squared, 4), "\n")
cat("OLS Starter Players Adj R-squared:", round(summary(ols_starter)$adj.r.squared, 4), "\n\n")
cat("Probit Starter Players AIC:", round(probit_starter$aic, 2), "\n")
cat("Probit Starter Players McFadden's Pseudo RÂ²:", round(1 - probit_starter$deviance/probit_starter$null.deviance, 4), "\n")
# Return results needed for the summary table
return(list(
dataset = select_file,
ols_r2 = summary(ols_starter)$r.squared,
ols_adj_r2 = summary(ols_starter)$adj.r.squared,
probit_aic = probit_starter$aic,
probit_pseudo_r2 = 1 - probit_starter$deviance/probit_starter$null.deviance,
probit_kicker_results = probit_results,  # Changed from kicker_results to probit_kicker_results
ols_kicker_results = ols_results  # Added ols_kicker_results
))
}
# Define the datasets to analyze
datasets <- c(
"processed_predict_ccfd_off_grades.csv_v2.csv.gz",
"processed_predict_ccfd_off_yards.csv_v2.csv.gz",
"processed_predict_ccfd_off_tds.csv_v2.csv.gz",
"processed_predict_ccfd_off_first_downs.csv_v2.csv.gz",
"processed_predict_ccfd_def_stops.csv_v2.csv.gz",
"processed_predict_ccfd_def_grades.csv_v2.csv.gz",
"processed_predict_ccfd_def_tackles.csv_v2.csv.gz",
"processed_predict_ccfd_def_pressure.csv_v2.csv.gz"
)
# Initialize data.table to store summary results
summary_results <- data.table(
Dataset = character(),
OLS_R2 = numeric(),
OLS_Adj_R2 = numeric(),
Probit_AIC = numeric(),
Probit_Pseudo_R2 = numeric()
)
# Initialize lists to store results
kicker_punter_probit_results <- list()
kicker_punter_ols_results <- list()
# Run analysis on each dataset
for (i in 1:length(datasets)) {
dataset_name <- gsub(".csv.gz", "", datasets[i])
# Make dataset name more readable
display_name <- gsub("processed_predict_ccfd_|_v2", "", dataset_name)
display_name <- gsub("_", " ", display_name)
display_name <- tools::toTitleCase(display_name)
cat("\n\n")
cat(paste(rep("=", 100), collapse=""), "\n")
cat(sprintf("ANALYZING DATASET %d/%d: %s\n", i, length(datasets), display_name))
cat(paste(rep("=", 100), collapse=""), "\n\n")
# Run analysis
results <- analyze_attempt_models(datasets[i])
# Store summary results
summary_results <- rbindlist(list(summary_results, data.table(
Dataset = display_name,
OLS_R2 = results$ols_r2,
OLS_Adj_R2 = results$ols_adj_r2,
Probit_AIC = results$probit_aic,
Probit_Pseudo_R2 = results$probit_pseudo_r2
)))
# Store kicker/punter results for probit and ols models
if (nrow(results$probit_kicker_results) > 0) {  # Changed from kicker_results to probit_kicker_results
kicker_punter_probit_results[[display_name]] <- results$probit_kicker_results  # Changed from kicker_results to probit_kicker_results
}
if (nrow(results$ols_kicker_results) > 0) {
kicker_punter_ols_results[[display_name]] <- results$ols_kicker_results
}
}
